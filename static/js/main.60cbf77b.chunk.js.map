{"version":3,"sources":["logo.svg","Sudoku/Square.js","Sudoku/Box.js","Sudoku/Board.js","Sudoku/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","className","value","this","props","onChange","evt","size","React","Component","Box","i","renderSquare","initialBoardState","loading","fresh","numbers","Board","state","j","boxValues","Array","count","Math","floor","k","parseInt","sqIndex","handleChange","inp","includes","toString","box","square","validatedInput","target","validateInput","newNumbers","setState","join","fetchSolution","url","fetch","response","json","data","sudoku","renderBox","onClick","solve","clear","rel","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60cbf77b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nexport default class Square extends React.Component {\r\n    render() {\r\n      return (\r\n        <input className=\"square\" \r\n              value={this.props.value===0 ? '' : this.props.value} \r\n              onChange={evt => this.props.onChange(evt)} size=\"1\">\r\n        </input>\r\n      );\r\n    }\r\n  }","import React from 'react';\r\nimport Square from './Square.js'\r\n\r\nexport default class Box extends React.Component {\r\n    renderSquare(i) {\r\n      return <Square value={this.props.value[i]} onChange={evt => this.props.onChange(evt, i)}/>;\r\n    }\r\n    \r\n    render() {\r\n  \r\n      return (\r\n        <div className=\"box\">\r\n          <div className=\"box-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"box-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"box-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }","import React from 'react';\r\nimport Box from './Box.js';\r\nimport './../App.css';\r\n  \r\n  const initialBoardState = {\r\n    loading: false,\r\n      fresh: true,\r\n      numbers : '000000000000000000000000000000000000000000000000000000000000000000000000000000000'\r\n  };\r\n\r\nclass Board extends React.Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = initialBoardState;\r\n    }\r\n  \r\n    \r\n    renderBox(j) {\r\n      //const sq = JSON.parse(JSON.stringify(this.state.squares));\r\n      const numbers = this.state.numbers;\r\n      var boxValues = new Array(9);\r\n      var count = 0;\r\n      for (var i = 3*Math.floor(j/3); i < 3*Math.floor(j/3)+3; i++)\r\n      {\r\n        for (var k = 3*(j%3); k < 3*(j%3)+3; k++) \r\n        {\r\n          boxValues[count++] = parseInt(numbers[9*i+k]);\r\n          //boxValues[count++] = sq[i][k];\r\n        }\r\n      }\r\n      return (\r\n        <Box value={boxValues} onChange={(evt, sqIndex) => this.handleChange(evt, j, sqIndex)}/>\r\n      );\r\n    }\r\n  \r\n    validateInput(inp){\r\n      if(['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'].includes(inp.toString())){\r\n        return true;\r\n      }\r\n      else return false;\r\n    }\r\n  \r\n    handleChange(evt, box, square){\r\n      //window.alert(evt.target.value + ' box: ' + box + ' square: ' + square)\r\n      // var newSquares = [\r\n      //     [0,0,0,0,0,0,0,0,0],\r\n      //     [0,0,0,0,0,0,0,0,0],\r\n      //     [0,0,0,0,0,0,0,0,0],\r\n      //     [0,0,0,0,0,0,0,0,0],\r\n      //     [0,0,0,0,0,0,0,0,0],\r\n      //     [0,0,0,0,0,0,0,0,0],\r\n      //     [0,0,0,0,0,0,0,0,0],\r\n      //     [0,0,0,0,0,0,0,0,0],\r\n      //     [0,0,0,0,0,0,0,0,0]\r\n      //   ];\r\n  \r\n      var validatedInput = evt.target.value;\r\n      if (!this.validateInput(evt.target.value))\r\n      {\r\n        validatedInput = 0;\r\n      }\r\n  \r\n      const newNumbers = [...this.state.numbers]\r\n      for (var i = 0; i < 9; i++)\r\n      {\r\n        for (var k = 0; k < 9; k++) \r\n        {\r\n          if(i===3*Math.floor(box/3)+Math.floor(square/3) \r\n            && k===3*(box%3)+(square%3) )\r\n          {\r\n  \r\n            newNumbers[9*i+k]=validatedInput;\r\n            //newSquares[i][k]=evt.target.value;    \r\n          }\r\n          else{\r\n            \r\n            //newSquares[i][k]=this.state.squares[i][k];\r\n          }\r\n        }\r\n      }\r\n      this.setState({numbers: newNumbers.join('')});  \r\n    }\r\n  \r\n    solve() {\r\n      this.setState({loading: true}); \r\n      const numbers = this.state.numbers;\r\n      this.fetchSolution(numbers);\r\n    }\r\n  \r\n    clear()\r\n    {\r\n      //this.setState({loading: true}); \r\n      //const numbers = this.state.numbers;\r\n      //this.fetchSolution(numbers);\r\n  \r\n      //alert('CLEAR button clicked');\r\n      this.setState(initialBoardState);\r\n    }\r\n  \r\n    async fetchSolution(numbers){\r\n      \r\n      this.setState({loading: true, fresh: false});\r\n      const url = 'https://jojosudoku.appspot.com/api/solve?sudoku='+numbers; //'http://localhost:8080/api/solve?sudoku=21';//'https://api.randomuser.me/';\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      this.setState({numbers: data.sudoku, loading: false})\r\n    }\r\n    \r\n  \r\n    \r\n    render() {\r\n  \r\n      return (\r\n        <div>\r\n          {this.state.fresh\r\n                  ? \r\n                  (<p>Enter your Sudoku here:</p>) \r\n                  : \r\n                  (<p>Your Sudoku is solved by:</p>)\r\n                }\r\n          <div className=\"board\">\r\n            <div className=\"board-row\">\r\n              {this.renderBox(0)}\r\n              {this.renderBox(1)}\r\n              {this.renderBox(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.renderBox(3)}\r\n              {this.renderBox(4)}\r\n              {this.renderBox(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n              {this.renderBox(6)}\r\n              {this.renderBox(7)}\r\n              {this.renderBox(8)}\r\n            </div>\r\n          </div>\r\n          <div><p></p></div>\r\n          <div className=\"solve-game\">    \r\n              <div className=\"request-state\">\r\n                {this.state.loading \r\n                  ? \r\n                  (<div className=\"loading-label\">LOADING...</div>) \r\n                  : \r\n                  (<button className=\"button\" onClick={() => this.solve()}>SOLVE</button>)\r\n                }\r\n              </div>\r\n              <div className=\"reset\">\r\n                <button className=\"button\" onClick={() => this.clear()}>CLEAR</button>\r\n              </div>\r\n          </div>\r\n          \r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Board;","import React from 'react';\r\nimport Board from './Board.js';\r\n\r\n\r\nexport default class extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"sudoku\">\r\n          \r\n          <div className=\"sudoku-board\">\r\n            <Board/>\r\n            <div className=\"get-code\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/galamian/jojo-sudoku\">Get the code</a></div>\r\n            \r\n          </div>\r\n          \r\n          \r\n        </div>\r\n      );\r\n    }\r\n   \r\n}  \r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Sudoku from \"./Sudoku\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Jojo's Sudoku Solver</h1>\n      </header>\n      <body>\n        <Sudoku/>\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}